#!/usr/bin/env bash
#
# reqs: realpath=="(GNU coreutils) 9.4" base64=="(GNU coreutils) 9.4" tac=="(GNU coreutils) 9.4"
# TODO pass GCMPB_VERBOSE around instead of global

set -Eeuo pipefail
# TODO better way to handle this for now just skip to prevent issues
if shopt | grep -q 'inherit_errexit'; then
  shopt -s inherit_errexit
fi

if [ -z "${GCMPB_LIB_DIR:-}" ]; then
  if [ -z "${BASH_SOURCE[0]:-}" ]; then
    # zsh
    GCMPB_LIB_DIR="${0:A:h}"
    # shellcheck disable=SC2034
    IS_ZSH=1
  else
    if ! command -v realpath >/dev/null 2>&1; then
      exit 1
    fi
    GCMPB_LIB_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
    # shellcheck disable=SC2034
    IS_BASH=1
  fi
else
  # TODO this should be passed in
  IS_BASH=1
fi

RED=$'\e[0;31m'
YELLOW=$'\e[1;33m'
CLEAR_COLOR=$'\e[0m'

# shellcheck source=./cache.sh
. "${GCMPB_LIB_DIR}/cache.sh"
. "${GCMPB_LIB_DIR}/stash.sh"

printerr() { printf "\033[0;31m%s\033[0m\n" "$*" >&2; }
printverbose() {
  local verbose="${1}"
  local rest="${*:2}"
  if [ "${verbose}" = 'true' ]; then
    printf "\n\033[0;93m%s\033[0m\n" "${rest}" >&2
  fi
}

global_config_file_path() {
  printf '%s' "${XDG_CONFIG_HOME:-$HOME}/.config/gcmpb"
}

config_file_path() {
  printf '%s' "$(git rev-parse --git-dir)/info/gcmpb"
}

config() {
  local config_filepath
  config_filepath="$(config_file_path)"
  readonly config_filepath
  if [ -f "${config_filepath}" ]; then
    # shellcheck disable=SC2086
    cat ${config_filepath}
  else
    printf ''
  fi
  local global_config_filepath
  global_config_filepath="$(global_config_file_path)"
  readonly global_config_filepath
  if [ -f "${global_config_filepath}" ]; then
    # shellcheck disable=SC2086
    cat ${global_config_filepath}
  else
    printf ''
  fi
}

run_on_first_move_to_newly_created_branch_config_value() {
  (config | grep 'run_on_first_move_to_newly_created_branch=' || [[ $? == 1 ]]) | head -n 1 | cut -d'=' -f2
}

should_run_on_first_move_to_newly_created_branch() {
  local run_on_first_move_to_newly_created_branch_config_value
  run_on_first_move_to_newly_created_branch_config_value="$(run_on_first_move_to_newly_created_branch_config_value)"
  readonly run_on_first_move_to_newly_created_branch_config_value
  if [ -n "${run_on_first_move_to_newly_created_branch_config_value}" ]; then
    printf '%s' "${run_on_first_move_to_newly_created_branch_config_value}"
  else
    printf 'false'
  fi
}

ignore_cleaning_branches_config_value() {
  (config | grep 'ignore_cleaning_branches=' || [[ $? == 1 ]]) | head -n 1 | cut -d'=' -f2
}

time_buffer_config_value() {
  (config | grep 'time_buffer=' || [[ $? == 1 ]]) | head -n 1 | cut -d'=' -f2
}

time_buffer() {
  local time_buffer
  time_buffer="$(time_buffer_config_value)"
  readonly time_buffer
  if [ -n "${time_buffer}" ]; then
    if printf '%s' "${time_buffer}" | grep -q -E "\d+"; then
      printf '%s' "${time_buffer}"
    else
      printerr "time_buffer config vaule of:'${time_buffer}' does not match \d+"
    fi
  else
    printf '120'
  fi
}

# TODO remove get_ prefix
get_branches() {
  local ignore_cleaning_branches="${1:-}"
  local current_branch current_remote_branch_parse
  current_branch="$(git branch --show-current)"
  local get_current_branch_result=0
  current_remote_branch_parse="$(git rev-parse --abbrev-ref --symbolic-full-name "@{u}" 2>&1)" || get_current_branch_result="$?"
  readonly current_branch current_remote_branch_parse get_current_branch_result

  if [[ "${current_remote_branch_parse}" == "fatal: no upstream configured for branch"* ]]; then
    local current_branch_with_remote=":${current_branch}"
  elif [[ "${current_remote_branch_parse}" == "fatal: HEAD does not point to a branch"* ]] || \
       [[ "${current_remote_branch_parse}" == "fatal: ambiguous argument '@{u}': unknown revision or path not in the working tree"* ]] ; then
    local current_branch_with_remote=" "
  else
    if [ "${get_current_branch_result}" = '0' ]; then
      local current_branch_with_remote="${current_remote_branch_parse}:${current_branch}"
    else
      printerr "${current_remote_branch_parse}"
      exit 1
    fi
  fi
  local remotes
  remotes="$(git remote)"
  readonly remotes
  if [ -n "${remotes}" ]; then
    local default_remote default_branch
    default_remote="$(git remote | head -n1)"
    default_branch="$(git ls-remote --symref "${default_remote}" HEAD | grep 'ref' | cut -d'/' -f3 | cut -d$'\t' -f1)"
    readonly default_remote default_branch

    if [ "${ignore_cleaning_branches}" = "" ]; then
      ignore_cleaning_branches=" "
    fi

    local branches_to_check
    branches_to_check="$(git for-each-ref --format='%(upstream:short):%(refname:short)' refs/heads/ | grep -Ev '^:' | grep -v "${current_branch_with_remote}" |
      grep -v "${default_remote}/${default_branch}" | grep -v -E "${ignore_cleaning_branches}")"
    readonly branches_to_check
    printf '%s\n' "${branches_to_check}"
  else
    printf '\n'
  fi
}

join_by() {
  local d=${1-} f=${2-}
  printf %s "${f//$'\n'/$d}"
}

available_platforms() {
  local dir="${1}"
  printf "%s" "$(join_by '|' "$(find "${dir}" -mindepth 1 -maxdepth 1 -exec basename {} \; | cut -d '.' -f1 | sort)")"
}

# TODO be more strict about url parsing
query_vcs_platform() {
  local -r remote="${1}"
  local -r platforms_available="${2}"
  local platform
  platform="$(git remote -v | grep 'push' | grep -E "^${remote}" | cut -d$'\t' -f2- | grep -o -E "${platforms_available}" | head -n1)"
  readonly platform
  if [ -z "${platform}" ]; then
    # shellcheck disable=SC2016
    printf '%s:%s' 'not_found:platform not found from `git remote -v`' "${platforms_available}"
  else
    printf '%s' "found:${platform}"
  fi
}

spin() {
  local empty_or_message="${1:-}"
  local -r spinner='⣾⣽⣻⢿⡿⣟⣯⣷'
  local -r charwidth=1

  local message=""
  if [ -n "${empty_or_message}" ]; then
    message="${empty_or_message} "
  fi

  local i=0
  while true; do
    i=$(((i + 1) % ${#spinner}))
    printf "\r%s" "${message}${spinner:$i:$charwidth} "
    sleep 0.1
  done
}

kill_spinner_if_running() {
  local spinner_pid="${1}"
  if kill -s 0 "${spinner_pid}" >/dev/null 2>&1; then
    kill "${spinner_pid}" >/dev/null 2>&1
  fi
}

GIT_ALL_REMOTE_NAMES_SET=false
GIT_ALL_REMOTE_NAMES=()
set_get_all_remote_names() {
  if [ "${GIT_ALL_REMOTE_NAMES_SET}" = "false" ]; then
    while IFS= read -r line; do
      GIT_ALL_REMOTE_NAMES[${#GIT_ALL_REMOTE_NAMES[@]}]="${line}"
    done <<<"$(git remote | uniq)"
    readonly GIT_ALL_REMOTE_NAMES
  fi
}

GIT_PRUNE_REMOTE_RESPONSE_CACHE_SET=false
GIT_PRUNE_REMOTE_RESPONSE_CACHE=''
detect_pruneable() {
  if [ "${GIT_PRUNE_REMOTE_RESPONSE_CACHE_SET}" = "false" ]; then
    set_get_all_remote_names
    if [ -n "${GIT_ALL_REMOTE_NAMES[*]}" ]; then
      GIT_PRUNE_REMOTE_RESPONSE_CACHE="$(git remote prune -n "${GIT_ALL_REMOTE_NAMES[@]}")"
    fi
    readonly GIT_PRUNE_REMOTE_RESPONSE_CACHE
    GIT_PRUNE_REMOTE_RESPONSE_CACHE_SET=true
    readonly GIT_PRUNE_REMOTE_RESPONSE_CACHE_SET
    printf '%s' "${GIT_PRUNE_REMOTE_RESPONSE_CACHE}"
  else
    printf '%s' "${GIT_PRUNE_REMOTE_RESPONSE_CACHE}"
  fi
}

exit_if_platform_not_found() {
  local platform_query_result="${1}"
  local platforms_directory="${2}"
  local spinner_pid="${3}"
  local platform platform_query_discrete
  platform="$(cut -d':' -f2 <<<"${platform_query_result}")"
  platform_query_discrete="$(cut -d':' -f1 <<<"${platform_query_result}")"
  readonly platform platform_query_discrete
  if [ "${platform_query_discrete}" = "not_found" ]; then
    kill_spinner_if_running "${spinner_pid}"
    printf '%s\n%s' "${platform} in ${platforms_directory}/" "$(ls "${platforms_directory}/")"
    exit 22
  fi
}

clean_pr_merged_branches() {
  local branches_to_check="${1}"
  local -r platforms_directory="${2}"
  local auto_apply="${3:-false}"
  local verbose="${4:-}"
  local spinner="${5:-true}"
  local to_delete=()
  local dangling=()
  local platforms_available
  local platform_paths=()
  platforms_available="$(available_platforms "${platforms_directory}")"
  readonly platforms_available
  local spinner_pid=""
  if [ "${spinner}" = "true" ]; then
    (
      set +x
      spin 'checking for dead things...'
    ) &
    spinner_pid=$!
    # shellcheck disable=SC2064
    trap "kill_spinner_if_running '${spinner_pid}'" EXIT
  fi
  for remote_name in $(printf '%s' "${branches_to_check}" | cut -d '/' -f1 | uniq); do
    local remote_group='' platform_query_result='' platform='' platform_query_discrete='' platform_loaded=''
    remote_group="$(printf '%s' "${branches_to_check}" | grep "^${remote_name}")"
    platform_query_result="$(query_vcs_platform "${remote_name}" "${platforms_available}")"

    platform="$(cut -d':' -f2 <<<"${platform_query_result}")"
    exit_if_platform_not_found "${platform_query_result}" "${platforms_directory}" "${spinner_pid}"

    local platform_path="${platforms_directory}/${platform}.sh"
    platform_paths[${#platform_paths[@]}]="${platform_path}"
    if [ "${platform_loaded}" != "${platform}" ]; then
      platform_loaded="${platform}"
    fi

    local decisions=()
    for remote_branch_and_local_branch in $remote_group; do
      local remote_branch='' local_branch=''
      remote_branch="$(echo "${remote_branch_and_local_branch}" | cut -d':' -f1)"
      local_branch="$(echo "${remote_branch_and_local_branch}" | cut -d':' -f2)"

      decisions["${#decisions[@]}"]="$(decide "${local_branch}" "${remote_branch}" "${platform_path}" "${spinner_pid}" "${verbose}")"
    done
    for decision in "${decisions[@]}"; do
      local local_branch=''
      local_branch="$(printf '%s' "${decision}" | cut -d':' -f2 -z | tr -d '\0')"
      printverbose "${verbose}" "${decision}"
      decision_command="$(printf '%s' "${decision}" | cut -d':' -f1 -z | tr -d '\0')"
      if [ "${decision_command}" = "${DECIDE_DELETE}" ]; then
        to_delete[${#to_delete[@]}]="${local_branch}"

      elif [ "${decision_command}" = "${DECIDE_WARNING_DELETED_ON_REMOTE}" ]; then
        dangling[${#dangling[@]}]="${local_branch}"
      fi
    done
  done

  local pruneable
  pruneable="$(detect_pruneable)"
  readonly pruneable

  local orphaned_stashes
  orphaned_stashes="$(get_orphaned_stashes)"
  readonly orphaned_stashes

  if [ ${#to_delete[@]} -gt 0 ] || [ ${#dangling[@]} -gt 0 ] || [ -n "${pruneable}" ] || [ -n "${orphaned_stashes}" ]; then
    kill_spinner_if_running "${spinner_pid}"
    local to_delete_arg="" dangling_arg=""
    to_delete_arg="$(array_join $'\n' "${to_delete[@]}")"
    dangling_arg="$(array_join $'\n' "${dangling[@]}")"
    print_menu "${pruneable}" "${to_delete_arg}" "${dangling_arg}" "${orphaned_stashes}"
    handle_plan "${auto_apply}" "${force_interactive}" "${to_delete_arg}" "${dangling_arg}" "${orphaned_stashes}"
  else
    kill_spinner_if_running "${spinner_pid}"
  fi
  printf '\n'
  for platform_path in "${platform_paths[@]}"; do
    post_run "${platform_path}"
  done
}

print_menu() {
  local -r pruneable="${1}"
  local -r to_delete="${2}"
  local dangling
  dangling="${3}"
  local -r orphaned_stashes="${4}"
  local to_delete_index=0 dangling_index=0 orphaned_index=0
  printf '\n%s\n' '==='
  while IFS= read -r line; do
    if [ -n "${line}" ]; then
      if [ "${to_delete_index}" = "0" ]; then
        printf '%s\n' "${RED}The following had PR's and can be deleted"
      fi
      printf '%s\n' "- ${line}"
      ((++to_delete_index))
    fi
  done <<<"${to_delete}"
  if [ "${to_delete_index}" = "0" ]; then
    printf '%s\n' "${RED}Did not find any branches with already merged/closed PRs"
  fi
  if [ -n "${pruneable}" ]; then
    printf '%s\n' "- Prune tracking branches"
    printf '%s\n' "${pruneable}" | grep -E '^\s\*'
  fi
  printf '%s' "${CLEAR_COLOR}"
  while IFS= read -r line; do
    if [ -n "${line}" ]; then
      if [ "${dangling_index}" = "0" ]; then
        printf '%s\n' "${YELLOW}The following were deleted on remote, but did not have a pr and will only be deleted if 'i' is entered"
      fi
      printf '%s\n' "- ${line}"
      ((++dangling_index))
    fi
  done <<<"${dangling}"
  printf '%s' "${CLEAR_COLOR}"
  while IFS= read -r line; do
    if [ -n "${line}" ]; then
      if [ "${orphaned_index}" = "0" ]; then
        printf '%s\n' "${YELLOW}The following stashes don't have a corresponding branch and will only be deleted if 'i' is entered"
      fi
      printf '%s\n' "- ${line}"
      ((++orphaned_index))
    fi
  done <<<"${orphaned_stashes}"
  printf '%s' "${CLEAR_COLOR}"
}

DECIDE_DELETE='delete'
DECIDE_WARNING_DELETED_ON_REMOTE='warning_deleted_on_remote'
DECIDE_SKIP='skip'

decide() {
  local -r local_branch="${1}"
  local -r remote_branch="${2}"
  local -r platform_path="${3}"
  local -r spinner_pid="${4}"
  local -r verbose="${5:-false}"

  # shellcheck source=/dev/null
  . "${platform_path}"
  set -Eeuo pipefail

  local -r type_result="$(type pre_init_hook 2>&1)"
  if ! (printf '%s' "${type_result}" | grep -sq 'not found'); then
    pre_init_hook "${spinner_pid}"
  fi

  local states
  states="$(get_states "${remote_branch}")"
  readonly states

  local -r had_a_pr="$(printf '%s\n' "${states}" | jq '. | length > 0')"
  if [ "${had_a_pr}" = "true" ]; then
    get_decision_on_branch_with_pr "${local_branch}" "${remote_branch}" "${states}"
  else
    get_decision_on_branch_without_pr "${local_branch}" "${remote_branch}" "${states}"
  fi
}

get_decision_on_branch_without_pr() {
  local local_branch="${1}"
  local remote_branch="${2}"
  local -r states="${3}"

  local deleted_remotely="false"
  local -r remotely_deleted_type_result="$(type branch_was_deleted_remotely 2>&1)"
  if ! (printf '%s' "${remotely_deleted_type_result}" | grep -sq 'not found'); then
    deleted_remotely="$(branch_was_deleted_remotely "${remote_branch}")"
  fi
  if [ "${deleted_remotely}" = "true" ]; then
    decide_print "${DECIDE_WARNING_DELETED_ON_REMOTE}" "${local_branch}" "${local_branch}->${remote_branch} never had a pr, but was deleted on remote" "${states}"
  else
    decide_print "${DECIDE_SKIP}" "${local_branch}" "${local_branch}->${remote_branch} never had a pr, not deleting" "${states}"
  fi
}

get_decision_on_branch_with_pr() {
  local -r local_branch="${1}"
  local -r remote_branch="${2}"
  local -r states="${3}"

  # TODO rename get_ -> has_
  local any_open_statuses
  any_open_statuses="$(get_any_open_states "${states}")"
  readonly any_open_statuses
  if [ "${any_open_statuses}" = "false" ]; then
    local only_completed=""
    only_completed="$(get_only_completed "${states}")"
    readonly only_completed
    if [ "${only_completed}" = "true" ]; then
      decide_print "${DECIDE_DELETE}" "${local_branch}" "${local_branch}->${remote_branch} had a pr that completed" "${states}"
    else
      decide_print "${DECIDE_SKIP}" "${local_branch}" "${local_branch}->${remote_branch} has a pr that is not marked as ${COMPLETED_STATES}, not deleting" "${states}"
    fi
  else
    decide_print "${DECIDE_SKIP}" "${local_branch}" "${local_branch}->${remote_branch} has open pr's, not deleting" "${states}"
  fi
}

decide_print() {
  local -r action="${1}"
  local -r local_branch="${2}"
  local -r message="${3}"
  local -r states="${4}"
  printf '%s:%s:%s:%s' "${action}" "${local_branch}" "${message}" "${states}"
}

array_join() {
  local -r delimiter="${1}"
  local array=("${@:2}")
  local -r size="${#array[@]}"
  if [ "${size}" -gt 1 ]; then
    local index=0
    for item in "${array[@]}"; do
      if [ "${index}" = $((size - 1)) ]; then
        printf '%s' "${item}"
      else
        printf "%s${delimiter}" "${item}"
      fi
      ((++index))
    done
  else
    printf '%s' "${array[@]}"
  fi
}

# TODO investigate what of this can be refactored and passed in
# for multiple calls or cached
ask() {
  local -r question="${1}"
  local -r force_interactive="${2:-true}"
  local apply='n'
  local init_interactive
  # TODO if this fails?
  # shellcheck disable=SC2155
  local -r tty_value="$(tty)"

  if [[ "${-}" =~ 'i' ]]; then
    init_interactive=true
  else
    init_interactive=false
    if [[ "${force_interactive}" = "true" ]]; then
      exec </dev/tty
    fi
  fi
  if [ "${IS_ZSH:-}" ]; then
    # shellcheck disable=SC2229
    read -r "?${question}" apply
  else
    read -rp "${question}" apply
  fi
  if [ "${init_interactive}" = "false" ]; then
    if [ "${tty_value}" = "not a tty" ]; then
      exec <&-
    else
      exec <"${tty_value}"
    fi
  fi
  printf "%s" "${apply}"
}

handle_plan() {
  local -r auto_apply="${1}"
  local -r force_interactive="${2}"
  local -r to_delete_delimited="${3}"
  local -r dangling_delimited="${4}"
  local -r orphaned_stashes_delimited="${5}"

  local apply='_'
  local -r verbose="${GCMPB_VERBOSE:-}"
  if [ "${auto_apply}" = "true" ]; then
    apply='y'
  else
    while [[ "ynpi" != *"${apply}"* ]]; do
      apply="$(ask 'apply changes? (y,n,p,i,h,?) ' "${force_interactive}")"
      if [[ "h?" == *"${apply}"* ]]; then
        interactive_help
      fi
    done
  fi

  if [ "${apply}" = "_" ]; then
    apply='n'
  fi

  local legacy_to_delete="$(printf '%s' "${to_delete_delimited}" | tr "\n" " " | tr -s " ")"
  if [ "${legacy_to_delete}" = ' ' ]; then
    legacy_to_delete=''
  fi
  local legacy_i="$(printf '%s' "${to_delete_delimited}" "${dangling_delimited}" | tr "\n" " " | tr -s " ")"
  if [ "${legacy_i}" = ' ' ]; then
    legacy_i=''
  fi
  if [ "${apply}" = "y" ]; then
    apply_plan "${legacy_to_delete}"
  elif [ "${apply}" = "i" ]; then
    if [ -n "${legacy_i}" ]; then
      delete_branches "${legacy_i}"
    fi
    delete_pruneable
    if [ -n "${orphaned_stashes_delimited}" ]; then
      delete_stashes_from_lines "${orphaned_stashes_delimited}"
    fi
  elif [ "${apply}" = "p" ]; then
    apply_partial "${verbose}" "${force_interactive}" "${to_delete_delimited}" "${dangling_delimited}" "${orphaned_stashes_delimited}"
  fi
}

apply_plan() {
  local to_delete=("${@}")
  if [ "${#to_delete[@]}" -gt 0 ] && [[ ! "${to_delete[*]}" =~ ^[[:space:]]*$ ]]; then
    delete_branches "${to_delete[@]}"
  fi
  delete_pruneable
}

delete_pruneable() {
  local pruneable
  pruneable="$(detect_pruneable)"
  readonly pruneable
  if [ -n "${pruneable}" ]; then
    local pruneable_remotes=()
    set_get_all_remote_names
    for remote_name in "${GIT_ALL_REMOTE_NAMES[@]}"; do
      if printf '%s' "${pruneable}" | grep -q "would prune] ${remote_name}/"; then
        pruneable_remotes[${#pruneable_remotes[@]}]="${remote_name}"
      fi
    done
    if [ "${#pruneable_remotes[@]}" -gt 0 ]; then
      prune_tracking "${pruneable_remotes[@]}"
    fi
  fi
}

apply_partial() {
  local verbose="${1}"
  local force_interactive="${2}"
  local to_delete
  to_delete="${3}"
  local dangling="${4}"
  local orphaned_stashes="${5}"
  readonly verbose force_interactive to_delete dangling orphaned_stashes

  while IFS= read -r branch; do
    if [ -n "${branch}" ]; then
      local should_delete
      should_delete="$(ask "${branch}:delete? (y/n)" "${force_interactive}")"
      if [ "${should_delete}" = "y" ]; then
        delete_branches "${branch}"
      else
        printverbose "${verbose}" "not deleting...${branch}"
      fi
    fi
  done <<<"${to_delete}"$'\n'"${dangling}"
  local pruneable
  pruneable="$(detect_pruneable)"
  readonly pruneable
  if [ -n "${pruneable}" ]; then
    local pruneable_remotes=()
    set_get_all_remote_names
    for remote_name in "${GIT_ALL_REMOTE_NAMES[@]}"; do
      if printf '%s' "${pruneable}" | grep -q "would prune] ${remote_name}/"; then
        pruneable_remotes[${#pruneable_remotes[@]}]="${remote_name}"
      fi
    done
    if [ "${#pruneable_remotes[@]}" -gt 0 ]; then
      interactive_prune_tracking "${verbose}" "${force_interactive}" "${pruneable_remotes[@]}"
    fi
  fi
  while IFS= read -r stash; do
    local response
    response="$(ask "${stash}:delete? (y/n/p)" "${force_interactive}")"
    local stash_no
    stash_no="$(stash_number_from_message "${stash}")"
    if [ "${response}" = "p" ]; then
      stash_diff "${stash_no}"
      response="$(ask "${stash}:delete? (y/n)" "${force_interactive}")"
    fi
    if [ "${response}" = "y" ]; then
      delete_stashes "${stash_no}"
    else
      printverbose "${verbose}" "not deleting...${stash}"
    fi
  done <<<"${orphaned_stashes}"
}

interactive_prune_tracking() {
  local -r verbose="${1}"
  local -r force_interactive="${2}"
  local -r remotes_to_prune=("${@:3}")
  local prune
  prune="$(ask "prune tracking? (y/n)" "${force_interactive}")"
  readonly prune
  if [ "${prune}" = 'y' ]; then
    prune_tracking "${remotes_to_prune[@]}"
  else
    printverbose "${verbose}" "not deleting...${branch}"
  fi
}

prune_tracking() {
  local -r from_remotes=("$@")
  git remote prune "${from_remotes[@]}"
}

delete_branches() {
  local -r branches=("$@")
  # shellcheck disable=SC2068
  git branch -D ${branches[@]}
}

post_run() {
  local -r platform_path="${1}"
  #shellcheck source=/dev/null
  . "${platform_path}"
  local -r type_result="$(type post_run_hook 2>&1)"
  if ! (printf '%s' "${type_result}" | grep -sq 'not found'); then
    post_run_hook
  fi
}

# TODO rename help_for_interactive
interactive_help() {
  # shellcheck disable=SC2006
  cat <<-'EOS'
  Interactive options: (case sensitive)
      y: yes
      n: no
      i: include dangling, stashes
      p: partial, same as in `git add -p` https://git-scm.com/docs/git-add#Documentation/git-add.txt--p
    h,?: print this help
EOS
}

default_usage_string() {
  cat <<-'EOS'
usage: git-cleanup-merged-pr-branches $PREVIOUS_SHA $NEXT_SHA $BRANCHES_OR_FILES | git-cleanup-merged-pr-branches help'
    All arguments are required however the first two can be empty strings.
    "...the ref of the previous HEAD, the ref of the new HEAD (which may or may not have changed), and a flag indicating whether the checkout was a branch checkout (changing branches, flag=1) or a file checkout (retrieving a file from the index, flag=0)."
    Further explanation of arguments is here https://git-scm.com/docs/githooks#_post_checkout
EOS
}

standalone_usage_string() {
  printf "%s\n" "usage: git-cleanup-merged-pr-branches |  git-cleanup-merged-pr-branches help|--help|?|--?"
}

help() {
  local -r standalone="${1:-false}"
  if [ "${standalone}" = "true" ]; then
    standalone_usage_string
  else
    default_usage_string
  fi
  interactive_help
  cat <<-'EOS'
  Variables:
  SKIP_CLEANUP_MERGED_PR_BRANCHES: if set to true this script will skip execution
    GCMPB_VERBOSE: if set to true this script will print more information as it runs
EOS
}

cache_filepath() {
  local info_dir
  info_dir="$(git rev-parse --git-dir)/info"
  readonly info_dir
  mkdir -p "${info_dir}"
  local -r cache_file="${info_dir}/gcmpb.cache"
  touch "${cache_file}"
  printf '%s' "${cache_file}"
}

cache_file() {
  cat "$(cache_filepath)"
}

save_current_run_time_to_cache() {
  local filepath other_lines
  filepath="$(cache_filepath)"
  other_lines="$(cache_file | grep -v 'last_ran_at=' || [[ $? == 1 ]])"
  readonly other_lines filepath
  printf '%s\n' "${other_lines}" >"${filepath}"
  printf 'last_ran_at=%s\n' "$(date +%s)" >>"${filepath}"
}

get_last_run_time() {
  (cache_file | grep 'last_ran_at=' || [[ $? == 1 ]]) | head -n 1 | cut -d'=' -f2
}

current_state_has_no_branch_name() {
  if [ -z "$(git branch --show-current)" ]; then
    printf 'true'
  else
    printf 'false'
  fi
}

is_past_buffer_time() {
  local -r buffer_time_override="${1:-}"
  local last_run_time
  last_run_time="$(get_last_run_time)"
  readonly last_run_time
  if [ "${buffer_time_override}" = "0" ]; then
    printf 'true'
  else
    if [ -z "${last_run_time}" ]; then
      save_current_run_time_to_cache
      printf 'true'
    else
      local time_buffer_value
      time_buffer_value="$(time_buffer)"
      readonly time_buffer_value
      if ((($(date +%s) - last_run_time) > time_buffer_value)); then
        printf 'true'
      else
        printf 'false'
      fi
    fi
  fi
}

CLONE_SHA='0000000000000000000000000000000000000000'
GIT_CHECKOUT_FILES='FILES'
GIT_CHECKOUT_BRANCHES='BRANCHES'

GIT_CHECKOUT_BRANCHES_OR_FILES=("${GIT_CHECKOUT_FILES}" "${GIT_CHECKOUT_BRANCHES}")

should_run() {
  local -r skip_cleanup_merged_pr_branches="${1}"
  local -r git_terminal_prompt_raw="${2}"
  local -r branch_or_files="${3}"
  local -r interactive_rebase_in_progress="${4}"
  local -r previous_sha="${5}"
  local -r next_sha="${6}"
  local -r run_on_first_move_to_newly_created_branch="${7}"
  local -r buffer_time_override="${8}"
  local -r manually_called="${9}"

  if [ "${skip_cleanup_merged_pr_branches}" = "true" ]; then
    printf 'false:skip_env_variable_set'
  elif [ "${interactive_rebase_in_progress}" = "true" ]; then
    printf 'false:interactive_rebase_is_in_progress'
  elif [ "${manually_called}" = "true" ]; then
    printf 'true:manually_called'
  elif [ "$(current_state_has_no_branch_name)" = "true" ]; then
    printf 'false:current_state_has_no_branch_name'
  elif [ "${git_terminal_prompt_raw}" = "0" ]; then
    printf 'false:git_terminal_prompt_set_to_zero'
  elif [ "$(is_past_buffer_time "${buffer_time_override}")" = "false" ]; then
    printf 'false:not_past_buffer_time'
  else
    if [ "$(new_branch "${branch_or_files}" "${previous_sha}" "${next_sha}")" = "true" ]; then
      if [ "${run_on_first_move_to_newly_created_branch}" = "true" ]; then
        save_current_run_time_to_cache
        printf 'true'
      else
        printf 'false:run_on_first_move_to_newly_created_branch_set_to_false'
      fi
    else
      if [ "${previous_sha}" = "${CLONE_SHA}" ]; then
        printf 'false:newly_cloned_repo'
      else
        if [ "${branch_or_files}" = "${GIT_CHECKOUT_BRANCHES}" ]; then
          save_current_run_time_to_cache
          printf 'true'
        else
          printf 'false:checking_out_files'
        fi
      fi
    fi
  fi
}

is_in_git_repo() {
  git rev-parse --is-inside-work-tree 2>/dev/null || printf '%s\n' 'false' # \n is to match format of rev-parse
}

# TODO rename to is_new_branch
new_branch() {
  local -r branch_or_files="${1}"
  local -r previous_sha="${2}"
  local -r next_sha="${3}"
  if [ "${branch_or_files}" = "${GIT_CHECKOUT_FILES}" ]; then
    printf 'false'
  else
    local moved_here_how_many_times
    moved_here_how_many_times="$(git reflog | grep "checkout: moving from " | grep -c "to $(git branch --show-current)")"
    readonly moved_here_how_many_times
    if [ "${previous_sha}" = "${next_sha}" ] && [ "${moved_here_how_many_times}" = "1" ]; then
      printf 'true'
    else
      printf 'false'
    fi
  fi
}

branches_or_files_to_const() {
  local -r raw="${1}"
  printf '%s' "${GIT_CHECKOUT_BRANCHES_OR_FILES[$raw]}"
}

int_to_bool() {
  local -r int="${1}"
  if [ "${int}" = "0" ]; then
    printf "false"
  else
    printf "true"
  fi
}

call() {
  local previous_sha="${1}"
  local next_sha="${2}"
  local branch_or_files_raw="${3}"
  local auto_apply="${4:-false}"
  local skip_cleanup_merged_pr_branches="${5:-false}"
  local git_terminal_prompt_raw="${6:-1}"
  local verbose="${7:-false}"
  local spinner="${8:-true}"
  local buffer_time_override="${9:-}"
  local manually_called="${10:-false}"
  local -r platforms_directory="${11:-"${GCMPB_LIB_DIR}/platforms"}"
  local interactive_rebase_in_progress=false
  local -r force_interactive=true

  if [ "$(is_in_git_repo)" = "true" ]; then
    local branches_or_files
    branches_or_files="$(branches_or_files_to_const "${branch_or_files_raw}")"
    readonly branches_or_files

    if find -L "$(git rev-parse --git-dir)" -mindepth 1 | grep -iE 'rebase.*interactive' >/dev/null 2>&1; then
      interactive_rebase_in_progress=true
    fi

    local ignore_cleaning_branches
    ignore_cleaning_branches="$(ignore_cleaning_branches_config_value)"
    readonly ignore_cleaning_branches

    if [ "${ignore_cleaning_branches}" != "" ]; then
      printverbose "${verbose}" "Branches ignored from cleaning via config($(config_file_path)):${ignore_cleaning_branches}:"
    fi
    local should_run_on_first_move_to_newly_created_branch_result
    should_run_on_first_move_to_newly_created_branch_result="$(should_run_on_first_move_to_newly_created_branch)"
    readonly should_run_on_first_move_to_newly_created_branch_result
    local should_run_result
    should_run_result="$(should_run "${skip_cleanup_merged_pr_branches}" "${git_terminal_prompt_raw}" \
      "${branches_or_files}" "${interactive_rebase_in_progress}" "${previous_sha}" "${next_sha}" \
      "${should_run_on_first_move_to_newly_created_branch_result}" "${buffer_time_override}" "${manually_called}")"
    readonly should_run_result
    local -r should_run_bool="$(printf '%s' "${should_run_result}" | cut -d ':' -f1)"
    local -r should_not_run_reason="$(printf '%s' "${should_run_result}" | cut -d ':' -f2)"
    if [ "${should_run_bool}" = "true" ]; then
      local branches_to_check
      branches_to_check="$(get_branches "${ignore_cleaning_branches}")"
      clean_pr_merged_branches "${branches_to_check}" "${platforms_directory}" "${auto_apply}" "${verbose}" "${force_interactive}" "${spinner}"
    else
      printverbose "${verbose}" "${should_not_run_reason}"
    fi
  else
    printf '%s\n' 'cannot determine if in a git repo'
  fi
}
