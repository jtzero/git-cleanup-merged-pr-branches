#!/usr/bin/env -S PATH="${PATH}" bash
# pass along path in case you are using homebrew or the like

set -Eeuo pipefail

if [ -z "${BASH_SOURCE[0]:-}" ]; then
  # zsh
  LIBEXEC_DIR="${0:A:h}"
else
  LIBEXEC_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
fi

GCMPB_ROOT_DIR="$(dirname "${LIBEXEC_DIR}")"
TESTS_DIR="${GCMPB_ROOT_DIR}/tests"

OLDPWD="${PWD}"

cd "${GCMPB_ROOT_DIR}" || exit 1

if git config --global --get-all safe.directory | grep -q "${GCMPB_ROOT_DIR}/tests/test_helper/bats-support" ; then
  git config --global --add safe.directory "${GCMPB_ROOT_DIR}"
  git config --global --add safe.directory "${GCMPB_ROOT_DIR}/tests/test_helper/bats-assert"
  git config --global --add safe.directory "${GCMPB_ROOT_DIR}/tests/test_helper/bats-support"
fi

git submodule init
git submodule update

cd "${GCMPB_ROOT_DIR}" || exit 1

export BATS_LIB_PATH="${TESTS_DIR}${BATS_LIB_PATH:+":${BATS_LIB_PATH}"}"
export BATS_TEST_LIB="${TESTS_DIR}"

if [ "${1:-}" = "debug" ]; then
  if [ -n "${2:-}" ]; then
    set -x
    bats --show-output-of-passing-tests --print-output-on-failure --verbose-run -x "${@:2}"
    set +x
  else
    set -x
    bats --show-output-of-passing-tests --print-output-on-failure --verbose-run -x ./tests/{unit,integration}/
    set +x
  fi
elif [ -n "${1:-}" ]; then
  set -x
  bats "${@}"
  set +x
else
  set -x
  bats -r ./tests/{unit,integration}/
  set +x
fi

cd "${OLDPWD}" || exit 1
